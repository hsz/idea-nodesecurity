package mobi.hsz.idea.nodesecurity.codeInspection

import com.intellij.codeInspection.InspectionManager
import com.intellij.codeInspection.LocalInspectionTool
import com.intellij.codeInspection.ProblemDescriptor
import com.intellij.codeInspection.ProblemsHolder
import com.intellij.psi.PsiFile
import mobi.hsz.idea.nodesecurity.NodeSecurityBundle
import mobi.hsz.idea.nodesecurity.utils.Utils
import mobi.hsz.idea.nodesecurity.utils.VulnerabilitiesScanner

class VulnerabilityInspection : LocalInspectionTool() {

    override fun checkFile(file: PsiFile, manager: InspectionManager, isOnTheFly: Boolean): Array<ProblemDescriptor>? {
        return when {
            !Utils.isSupportedFile(file.virtualFile) -> super.checkFile(file, manager, isOnTheFly)
            else -> doCheckFile(file, manager, isOnTheFly)
        }
    }

    private fun doCheckFile(file: PsiFile, manager: InspectionManager, isOnTheFly: Boolean): Array<ProblemDescriptor>? {
        val problemsHolder = ProblemsHolder(manager, file, isOnTheFly)

        VulnerabilitiesScanner.scan(file).forEach { (advisory, element) ->
            problemsHolder.registerProblem(
                    element,
                    NodeSecurityBundle.message(
                            "codeInspection.vulnerable",
                            advisory.module_name,
                            advisory.vulnerable_versions,
                            advisory.patched_versions
                    ),
                    null
            )

        }

        return problemsHolder.resultsArray
    }

    override fun runForWholeFile(): Boolean = true
}

