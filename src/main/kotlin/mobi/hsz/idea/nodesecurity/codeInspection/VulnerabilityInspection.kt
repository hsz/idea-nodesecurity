package mobi.hsz.idea.nodesecurity.codeInspection

import com.intellij.codeInspection.InspectionManager
import com.intellij.codeInspection.LocalInspectionTool
import com.intellij.codeInspection.ProblemDescriptor
import com.intellij.codeInspection.ProblemsHolder
import com.intellij.json.psi.JsonElement
import com.intellij.json.psi.JsonElementVisitor
import com.intellij.json.psi.JsonObject
import com.intellij.openapi.util.text.StringUtil
import com.intellij.psi.PsiFile
import mobi.hsz.idea.nodesecurity.NodeSecurityBundle
import mobi.hsz.idea.nodesecurity.components.NodeSecuritySettings

class VulnerabilityInspection : LocalInspectionTool() {
    private var settings: NodeSecuritySettings = NodeSecuritySettings.getInstance()

    override fun checkFile(file: PsiFile, manager: InspectionManager, isOnTheFly: Boolean): Array<ProblemDescriptor>? {
        return when {
            file.name != "package.json" -> super.checkFile(file, manager, isOnTheFly)
            else -> doCheckFile(file, manager, isOnTheFly)
        }
    }

    private fun doCheckFile(file: PsiFile, manager: InspectionManager, isOnTheFly: Boolean): Array<ProblemDescriptor>? {
        val (advisories) = settings.state
        val problemsHolder = ProblemsHolder(manager, file, isOnTheFly)

        val json: JsonObject = file.firstChild as JsonObject
        val dependencies = json.findProperty("dependencies")
        dependencies?.value?.acceptChildren(object : JsonElementVisitor() {
            override fun visitElement(o: JsonElement) {
                val name = o.firstChild.text.trim()
                val version = o.lastChild.text.trim()

                advisories.getOrDefault(name, emptyList()).forEach {
                    try {
                        if (it.isVulnerable(version)) {
                            println("$name is vulnerable!")
                            problemsHolder.registerProblem(
                                    o.originalElement,
                                    NodeSecurityBundle.message("codeInspection.vulnerable", name, it.vulnerable_versions, it.patched_versions),
                                    null
                            )
                        }
                    } catch (e: Exception) {
                        println(e)
                    }
                }
            }
        })

        return problemsHolder.resultsArray
    }

    override fun runForWholeFile(): Boolean = true
}

fun String.trim(): String = StringUtil.replace(this, "\"", "")
